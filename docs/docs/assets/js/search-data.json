{
  
  "0": {
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. . NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. . License and Sublicense Grant. . (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) &quot;Licensee Products&quot; means Licensee products that use or incorporate Microchip Products. (ii) &quot;Microchip Product&quot; means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) &quot;Object Code&quot; means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) &quot;Source Code&quot; means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) &quot;Third Party&quot; means Licensee&#39;s agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) &quot;Third Party Products&quot; means Third Party products that use or incorporate Microchip Products. . (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. . Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. . (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. . (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party&#39;s authorized use of the Software in conformance with this Section 2(d). . (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. . (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. . | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. . | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. . | Licensee’s Obligations. . (a) Licensee will ensure Third Party compliance with the terms of this Agreement. . (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. . (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. . (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. . | Confidentiality. . (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. . (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. . | Ownership of Proprietary Rights. . (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. . (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. . | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. . | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. . | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. . | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. . | General. . (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. . (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. . (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. . (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. . (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. . (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. . (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. . (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. . (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. . | If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. . Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. . License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. . Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. . THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. .",
    "url": "http://localhost:4000/azure-rtos-threadx/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  }
  ,"1": {
    "title": "Azure RTOS ThreadX application examples",
    "content": ". To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Azure RTOS ThreadX application examples . This advanced real-time operating system (RTOS) is designed specifically for deeply embedded applications. Among the multiple benefits it provides are advanced scheduling facilities, message passing, interrupt management, and messaging services. Azure RTOS ThreadX has many advanced features, including picokernel architecture, preemption threshold, event chaining, and a rich set of system services. For licensing information, go to the Azure RTOS ThreadX Licensing . MPLAB Harmony is a flexible, abstracted, fully integrated firmware development platform for PIC32M and SAM microcontrollers; and SAM Microprocessors which enables seamless integration of third-party solutions, such as RTOS, Middleware, Drivers, and so on, into the software framework. . Development Kits . The following table provides links to documentation on how to build and run Azure RTOS ThreadX application examples on different development kits . Development Kit . PIC32MK MCJ Curiosity Pro Development Board | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . SAM9X60-EK Evaluation Kit | . SAMA5D2 Xplained Ultra Evaluation Kit | . SAM C21N Xplained Pro Evaluation Kit | . SAM E54 Xplained Pro Evaluation Kit | . SAM E70 Xplained Ultra Evaluation Kit | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/readme.html",
    "relUrl": "/apps/basic_threadx/readme.html"
  }
  ,"2": {
    "title": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . pic32mk_mcj_curiosity_pro.X | MPLABX Project for PIC32MK MCJ Curiosity Pro Development Board | . Setting up PIC32MK MCJ Curiosity Pro Development Board . Connect micro USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . [PIC32MK MCJ Curiosity Pro Development Board] | LED2 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_pic32mk_mcj_curiosity_pro.html",
    "relUrl": "/apps/basic_threadx/docs/readme_pic32mk_mcj_curiosity_pro.html"
  }
  ,"3": {
    "title": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) . Connect a micro USB cable to the USB Debug port J19 | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | LED1 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_pic32mz_das_sk.html",
    "relUrl": "/apps/basic_threadx/docs/readme_pic32mz_das_sk.html"
  }
  ,"4": {
    "title": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . pic32mz_ef_sk.X | MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . Connect a mini USB cable to the USB Debug port J3 | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | LED1 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_pic32mz_ef_sk.html",
    "relUrl": "/apps/basic_threadx/docs/readme_pic32mz_ef_sk.html"
  }
  ,"5": {
    "title": "Building and Running on SAM9X60-EK Evaluation Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . sam_9x60_ek.X | MPLABX project for SAM9X60-EK Evaluation Kit | . sam_9x60_ek_iar.IAR | IAR project for SAM9X60-EK Evaluation Kit | . Setting up AT91Bootstrap loader . To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. . Setting up the hardware . The following table shows the target hardware for the application projects. . Project Name Board . sam_9x60_ek.X sam_9x60_ek_iar.IAR | SAM9X60-EK Evaluation Kit | .   |   | . Setting up SAM9X60-EK Evaluation Kit . Addtional hardware required . SD Card with FAT32 file system | . Setting up the SD Card . Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . SDMMC slot used for bootloading the application is SDMMC0 (J4) | Connect the USB port J22 on board to the computer using a micro USB cable (to enable debug com port) | Connect the USB port J7 on board to the computer using a micro USB cable (to power the board) | NOTE - Reset push button is labelled as SW3 | . Running the Application . Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . SAM9X60-EK Evaluation Kit | RGB_LED(Green) | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_sam_9x60_ek.html",
    "relUrl": "/apps/basic_threadx/docs/readme_sam_9x60_ek.html"
  }
  ,"6": {
    "title": "Building and Running on SAMA5D2 Xplained Ultra Evaluation Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . sam_a5d2_xult_iar.IAR | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . Setting up AT91Bootstrap loader . To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. . Setting up the hardware . The following table shows the target hardware for the application projects. . Project Name Board . sam_a5d2_xult.X sam_a5d2_xult_iar.IAR | SAMA5D2 Xplained Ultra Evaluation Kit | .   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . SD Card with FAT32 file system | . Setting up the SD Card . Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . Running the Application . Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_sam_a5d2_xult.html",
    "relUrl": "/apps/basic_threadx/docs/readme_sam_a5d2_xult.html"
  }
  ,"7": {
    "title": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . Setting up SAM C21N Xplained Pro Evaluation Kit . Connect the Debug USB port on the board to the computer using a micro USB cable | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . SAM C21N Xplained Pro Evaluation Kit | LED0 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_sam_c21n_xpro.html",
    "relUrl": "/apps/basic_threadx/docs/readme_sam_c21n_xpro.html"
  }
  ,"8": {
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Setting up SAM E54 Xplained Pro Evaluation Kit . Connect the Debug USB port on the board to the computer using a micro USB cable | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . SAM E54 Xplained Pro Evaluation Kit | LED0 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/basic_threadx/docs/readme_sam_e54_xpro.html"
  }
  ,"9": {
    "title": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". Basic ThreadX . This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status . Description . This demonstration creates a task which toggle an LED for every 500ms. . Downloading and building the application . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Path of the application within the repository is apps/basic_threadx/firmware/ . To build the application, refer to the following table and open the project using its IDE. . Azure RTOS ThreadX Application . Project Name Description . sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . Setting up SAM E70 Xplained Ultra Evaluation Kit . Connect the Debug USB port on the board to the computer using a micro USB cable | . Running the Application . Build and program the application using the MPLAB X IDE | The LED indicates the success or failure. The LED toggles on success i.e. for every 500 ms. | . | Refer to the following table for LED name: . Board LED Name . SAM E70 Xplained Ultra Evaluation Kit | LED1 | .   |   | .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_sam_e70_xult.html",
    "relUrl": "/apps/basic_threadx/docs/readme_sam_e70_xult.html"
  }
  ,"10": {
    "title": "Release notes",
    "content": ". Microchip MPLAB® Harmony 3 Release Notes . Release v3.2.0 . NEW FEATURES . Azure RTOS ThreadX v6.0.2 support for SAM and PIC32M devices | . Development kit and demo application support - The following table provides number of Azure RTOS ThreadX demo application available for different development kits . Development kits XC32 IAR . SAM E54 Xplained Pro Evaluation Kit | 1 | - | . SAM E70 Xplained Ultra Evaluation Kit | 1 | - | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | 1 | - | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | 1 | - | . PIC32MK MCJ Curiosity Pro Development Board | 1 | - | . SAM C21N Xplained Pro Evaluation Kit | 1 | - | . SAM A5D2 Xplained Ultra board | 1 | 1 | . ATSAM9X60-EK | 1 | 1 | . KNOWN ISSUES . The current known issues are as follows: . When creating IAR project for SAMA5D2, project should be manually configured to generate code in ARM mode (Default mode is Thumb) | . DEVELOPMENT TOOLS . MPLAB® X IDE v5.40 | MPLAB® XC32 C/C++ Compiler v2.41 | IAR EWARM v8.50 | MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3.6.0 | . | . Release v3.1.0 . NEW FEATURES . Added XC32 support for SAM 9X60 . | Supports Express Logic Threadx - 5.8.x.x (Threadx source files are not included in this repo and must be procured directly from Express Logic) | Development kit and demo application support - The following table provides number of ThreadX demo application available for different development kits | . Development kits XC32 IAR . SAM E54 Xplained Pro Evaluation Kit | 1 | - | . SAM E70 Xplained Ultra Evaluation Kit | 1 | - | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | 1 | - | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | 1 | - | . PIC32MK MCJ Curiosity Pro Development Board | 1 | - | . SAM C21N Xplained Pro Evaluation Kit | 1 | - | . SAM A5D2 Xplained Ultra board | 1 | 1 | . ATSAM9X60-EK | 1 | 1 | . KNOWN ISSUES . The current known issues are as follows: . When creating IAR projects for SAMA5D2 and SAM9X6 parts, project should be manually configured to generate code in ARM mode (Default mode is Thumb) | When creating IAR projects for SAMA5D2 and SAM9X6 parts, preprocessor macro “TX_INCLUDE_USER_DEFINE_FILE” should be added to the IAR project configuration | . DEVELOPMENT TOOLS . MPLAB® X IDE v5.3 | MPLAB® XC32 C/C++ Compiler v2.30 | IAR Embedded Workbench® for ARM® v8.4 or above | MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3.4.1 | . | . Release v3.0.0 . NEW FEATURES . New part support - This release introduces initial support for Microchip 32 bit SAM MCU devices based on ARM Cortex M0+ core | Microchip 32 bit SAM MCU devices based on ARM Cortex M4 core | Microchip 32 bit SAM MCU devices based on ARM Cortex M7 core | Microchip 32 bit MCU devices in PIC32MZ DA family | Microchip 32 bit MCU devices in PIC32MZ EF family | Microchip 32 bit MCU devices in PIC32MK family | Microchip 32 bit SAMA5D27 MPU device (ARM cortex A5 core) | Microchip 32 bit SAM9X60 MPU device (ARM ARM926EJ-S core) | . | Supports Express Logic Threadx - 5.8.x.x (Threadx source files are not included in this repo and must be procured directly from Express Logic) | Development kit and demo application support - The following table provides number of ThreadX demo application available for different development kits | . Development kits Applications . SAM E54 Xplained Pro Evaluation Kit | 1 | . SAM E70 Xplained Ultra Evaluation Kit | 1 | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | 1 | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | 1 | . PIC32MK MCJ Curiosity Pro Development Board | 1 | . SAM C21N Xplained Pro Evaluation Kit | 1 | . SAM A5D2 Xplained Ultra board | 2 | . SAM 9X60 Evaluation Kit | 1 | . KNOWN ISSUES . The current known issues are as follows: . Threadx configurations for SAMA5D2 and SAM9X6 parts depend on csp and core version v3.5.1 or above | When creating IAR projects for SAMA5D2 and SAM9X6 parts, project should be manually configured to generate code in ARM mode (Default mode is Thumb) | When creating IAR projects for SAMA5D2 and SAM9X6 parts, preprocessor macro “TX_INCLUDE_USER_DEFINE_FILE” should be added to the IAR project configuration | . DEVELOPMENT TOOLS . MPLAB X IDE v5.25 | MPLAB XC32 C/C++ Compiler v2.30 | IAR Embedded Workbench® for ARM® (v8.40 or above) | MPLAB X IDE plug-ins: MPLAB Harmony Configurator (MHC) v3.3.0.1 | .",
    "url": "http://localhost:4000/azure-rtos-threadx/release_notes.html",
    "relUrl": "/release_notes.html"
  }
  ,"11": {
    "title": "",
    "content": ". Bootstrapping MPU applications using At91bootstrap loader . MPU applications are linked to execute from external DRAM memory that is available on the evaluation kit. This require all peripherals and clock leading to the DRAM memory to be configured prior to the application being programmed. This is done using a bootstrap loader. . Bootstrap loader project used for this purpose is a variant of the AT91Bootstrap project available for Microchip MPUs. It can be downloaded from here. This project is adapted to be used from within MPLABx IDE on both Windows and Linux. . To facilitate the debugging and running of the MPU application, each application in this repository is bundled with its own copy of the AT91Bootstrap project. Each copy of the bootstrap project can be found under same folder as the application project and is named and is prefixed with “at91bootstrap_”. For eg: if the application folder name is sam_9x60_ek.X, then bootstrap project folder will be named at91bootstrap_sam_9x60_ek.X and will be present at the same folder level. . Bootstrap project is configured to load and execute a raw binary file named “harmony.bin” from the SD card. SD card slot to be used shall vary with the evaluation kit. . Each application project is configured with a post build step which will generate the necessary binary file named “harmony.bin” at the end of each build. . If you are only interested in running or debugging the MPU applications in this repository , you can skip the following sections and and jump straight to Debugging MPU application using MPLABx. Each copy of the bootstrap project in this repository is preconfigured to the correct evaluation kit.Also, the bootstrap binary files required to program and run the applications are checked into the repository. . Building AT91Bootstrap project . Bootstrap project can be configured using MPLABx using its KCONFIG menu. To do this, open the project in MPLABx, right click on the project and select “properties”. In categories, select “Kconfig” as shown below: . . | Click on “LOAD” button and navigate to the boards folder inside the project. Choose the a default configuration file (defconfig) config file to select a target evaluation board and boot method For eg: If you want to boot harmony.bin file from sd card for SAM9X60 evaluation kit, navigate to board/sam9x60ek folder and select “sam9x60eksd_harmony_defconfig” file | . | Click on “Apply” and “OK” buttons to configure the project . | Build the project to generate the bootstrap binaries . | Note: At91bootstrap project requires arm-gcc to build it. XC32 toolchain is not supported yet | . Configure MPLABx application to use AT91Bootstrap loader . MPLABx debugger relies on AT91Bootstrap to configure the board before programming the application binaries. To configure an application to use AT91Bootstrap, follow the steps detailed below: . Configure a debug tool . Right click on the application project and select properties. This will open the properties window. In the configuration option –&gt; connected hardware tools, select the debugger. . . Note: if no debugger is connected, click on the “show all” check box and select the supported debugger. Only Jlink options are supported . | Select the target toolchain and click on apply to save the changes . | This will result in an additional menu option to be available in the configuration tree view called “bootstrap” as shown below: . . | . Configure bootstrap . Click on “Use bootstrap” check box to enable bootstrap support . | Click on the “LOAD” button to load the bootstrap file. This will open a file picker, which allows you to choose the bootstrap binary file. . | Navigate to the “binaries” folder under the AT91Bootstrap project folder. This contains the build output of the bootstrap project. You can either choose the “AT91Bootstrap.elf” file or “boot.bin” file . If ELF file is choosen, the “Bootstrap entry address” and the “Bootstrap load address” text box can be left empty as this information can be read from the ELF file | If BIN file is chosen, the bootstrap entry address and the load address should be filled in their corresponding text boxes | An example configuration can be seen below. Here a relative path is used with respect to the project directory, to make the configuration portable . . | . | . Debugging MPU applications using MPLABx . Once the applicaton is configured to use bootstrap loader, debugging the application is as simple right clicking the application and selecting “Debug” option. This will cause debugger to perform a two stage loading: . Stage 1: Loads the bootstrap loader into the internal SRAM and executes it. This will configure the board specific peripherals and memory . Stage 2: Loads the application into the external DRAM and debugs it. User can perform actions like setting breakpoints, single-stepping etc. . Debugging the applicaton using MPLABx has the following limitations: . Running application using debugger is not supported | Call stack is not supported | Step in, step out using debugger does not work | Note: Make sure that you reset the board between each debug sessions so that the debugger can attach to the target correctly . Running MPU applications . To run the applications, copy both the application binary named “harmony.bin” and the bootstrap binary named “boot.bin” onto an SD card. Insert the SD card into the SD slot of the evaluation kit and press the reset button. . The ROM bootloader will copy the bootstrap binary “boot.bin” into the internal SRAM and executes it. The bootstrap will configure the external DRAM and the required peripherals, then copy the applicaton binary “harmony.bin” into the DRAM and executes it. .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_at91bootstrap_sam_9x60_ek.html",
    "relUrl": "/apps/basic_threadx/docs/readme_at91bootstrap_sam_9x60_ek.html"
  }
  ,"12": {
    "title": "",
    "content": ". Bootstrapping MPU applications using At91bootstrap loader . MPU applications are linked to execute from external DRAM memory that is available on the evaluation kit. This require all peripherals and clock leading to the DRAM memory to be configured prior to the application being programmed. This is done using a bootstrap loader. . Bootstrap loader project used for this purpose is a variant of the AT91Bootstrap project available for Microchip MPUs. It can be downloaded from here. This project is adapted to be used from within MPLABx IDE on both Windows and Linux. . To facilitate the debugging and running of the MPU application, each application in this repository is bundled with its own copy of the AT91Bootstrap project. Each copy of the bootstrap project can be found under same folder as the application project and is named and is prefixed with “at91bootstrap_”. For eg: if the application folder name is sam_a5d2_xult.X, then bootstrap project folder will be named at91bootstrap_sam_a5d2_xult.X and will be present at the same folder level. . Bootstrap project is configured to load and execute a raw binary file named “harmony.bin” from the SD card. SD card slot to be used shall vary with the evaluation kit. . Each application project is configured with a post build step which will generate the necessary binary file named “harmony.bin” at the end of each build. . If you are only interested in running or debugging the MPU applications in this repository , you can skip the following sections and and jump straight to Debugging MPU application using MPLABx. Each copy of the bootstrap project in this repository is preconfigured to the correct evaluation kit.Also, the bootstrap binary files required to program and run the applications are checked into the repository. . Building AT91Bootstrap project . Bootstrap project can be configured using MPLABx using its KCONFIG menu. To do this, open the project in MPLABx, right click on the project and select “properties”. In categories, select “Kconfig” as shown below: . . | Click on “LOAD” button and navigate to the boards folder inside the project. Choose the a default configuration file (defconfig) config file to select a target evaluation board and boot method For eg: If you want to boot harmony.bin file from sd card for SAMA5D27 evaluation kit, navigate to board/sama5d2_xplained folder and select “sama5d2_xplainedsd_harmony_defconfig” file | . | Click on “Apply” and “OK” buttons to configure the project . | Build the project to generate the bootstrap binaries . | Note: At91bootstrap project requires arm-gcc to build it. XC32 toolchain is not supported yet | . Configure MPLABx application to use AT91Bootstrap loader . MPLABx debugger relies on AT91Bootstrap to configure the board before programming the application binaries. To configure an application to use AT91Bootstrap, follow the steps detailed below: . Configure a debug tool . Right click on the application project and select properties. This will open the properties window. In the configuration option –&gt; connected hardware tools, select the debugger. . . Note: if no debugger is connected, click on the “show all” check box and select the supported debugger. Only Jlink options are supported . | Select the target toolchain and click on apply to save the changes . | This will result in an additional menu option to be available in the configuration tree view called “bootstrap” as shown below: . . | . Configure bootstrap . Click on “Use bootstrap” check box to enable bootstrap support . | Click on the “LOAD” button to load the bootstrap file. This will open a file picker, which allows you to choose the bootstrap binary file. . | Navigate to the “binaries” folder under the AT91Bootstrap project folder. This contains the build output of the bootstrap project. You can either choose the “AT91Bootstrap.elf” file or “boot.bin” file . If ELF file is choosen, the “Bootstrap entry address” and the “Bootstrap load address” text box can be left empty as this information can be read from the ELF file | If BIN file is chosen, the bootstrap entry address and the load address should be filled in their corresponding text boxes | An example configuration can be seen below. Here a relative path is used with respect to the project directory, to make the configuration portable . . | . | . Debugging MPU applications using MPLABx . Once the applicaton is configured to use bootstrap loader, debugging the application is as simple right clicking the application and selecting “Debug” option. This will cause debugger to perform a two stage loading: . Stage 1: Loads the bootstrap loader into the internal SRAM and executes it. This will configure the board specific peripherals and memory . Stage 2: Loads the application into the external DRAM and debugs it. User can perform actions like setting breakpoints, single-stepping etc. . Debugging the applicaton using MPLABx has the following limitations: . Running application using debugger is not supported | Call stack is not supported | Step in, step out using debugger does not work | Note: Make sure that you reset the board between each debug sessions so that the debugger can attach to the target correctly . Running MPU applications . To run the applications, copy both the application binary named “harmony.bin” and the bootstrap binary named “boot.bin” onto an SD card. Insert the SD card into the SD slot of the evaluation kit and press the reset button. . The ROM bootloader will copy the bootstrap binary “boot.bin” into the internal SRAM and executes it. The bootstrap will configure the external DRAM and the required peripherals, then copy the applicaton binary “harmony.bin” into the DRAM and executes it. .",
    "url": "http://localhost:4000/azure-rtos-threadx/apps/basic_threadx/docs/readme_at91bootstrap_sam_a5d2_xult.html",
    "relUrl": "/apps/basic_threadx/docs/readme_at91bootstrap_sam_a5d2_xult.html"
  }
  ,"13": {
    "title": "",
    "content": ". Bootstrapping MPU applications using At91bootstrap loader . MPU applications are linked to execute from external DRAM memory that is available on the evaluation kit. This require all peripherals and clock leading to the DRAM memory to be configured prior to the application being programmed. This is done using a bootstrap loader. . Bootstrap loader project used for this purpose is a variant of the AT91Bootstrap project available for Microchip MPUs. It can be downloaded from here. This project is adapted to be used from within MPLABx IDE on both Windows and Linux. . To facilitate the debugging and running of the MPU application, each application in this repository is bundled with its own copy of the AT91Bootstrap project. Each copy of the bootstrap project can be found under same folder as the application project and is named and is prefixed with “at91bootstrap_”. For eg: if the application folder name is sam_9x60_ek.X, then bootstrap project folder will be named at91bootstrap_sam_9x60_ek.X and will be present at the same folder level. . Bootstrap project is configured to load and execute a raw binary file named “harmony.bin” from the SD card. SD card slot to be used shall vary with the evaluation kit. . Each application project is configured with a post build step which will generate the necessary binary file named “harmony.bin” at the end of each build. . If you are only interested in running or debugging the MPU applications in this repository , you can skip the following sections and and jump straight to Debugging MPU application using MPLABx. Each copy of the bootstrap project in this repository is preconfigured to the correct evaluation kit.Also, the bootstrap binary files required to program and run the applications are checked into the repository. . Building AT91Bootstrap project . Bootstrap project can be configured using MPLABx using its KCONFIG menu. To do this, open the project in MPLABx, right click on the project and select “properties”. In categories, select “Kconfig” as shown below: . . | Click on “LOAD” button and navigate to the boards folder inside the project. Choose the a default configuration file (defconfig) config file to select a target evaluation board and boot method For eg: If you want to boot harmony.bin file from sd card for SAM9X60 evaluation kit, navigate to board/sam9x60ek folder and select “sam9x60eksd_harmony_defconfig” file | . | Click on “Apply” and “OK” buttons to configure the project . | Build the project to generate the bootstrap binaries . | Note: At91bootstrap project requires arm-gcc to build it. XC32 toolchain is not supported yet | . Configure MPLABx application to use AT91Bootstrap loader . MPLABx debugger relies on AT91Bootstrap to configure the board before programming the application binaries. To configure an application to use AT91Bootstrap, follow the steps detailed below: . Configure a debug tool . Right click on the application project and select properties. This will open the properties window. In the configuration option –&gt; connected hardware tools, select the debugger. . . Note: if no debugger is connected, click on the “show all” check box and select the supported debugger. Only Jlink options are supported . | Select the target toolchain and click on apply to save the changes . | This will result in an additional menu option to be available in the configuration tree view called “bootstrap” as shown below: . . | . Configure bootstrap . Click on “Use bootstrap” check box to enable bootstrap support . | Click on the “LOAD” button to load the bootstrap file. This will open a file picker, which allows you to choose the bootstrap binary file. . | Navigate to the “binaries” folder under the AT91Bootstrap project folder. This contains the build output of the bootstrap project. You can either choose the “AT91Bootstrap.elf” file or “boot.bin” file . If ELF file is choosen, the “Bootstrap entry address” and the “Bootstrap load address” text box can be left empty as this information can be read from the ELF file | If BIN file is chosen, the bootstrap entry address and the load address should be filled in their corresponding text boxes | An example configuration can be seen below. Here a relative path is used with respect to the project directory, to make the configuration portable . . | . | . Debugging MPU applications using MPLABx . Once the applicaton is configured to use bootstrap loader, debugging the application is as simple right clicking the application and selecting “Debug” option. This will cause debugger to perform a two stage loading: . Stage 1: Loads the bootstrap loader into the internal SRAM and executes it. This will configure the board specific peripherals and memory . Stage 2: Loads the application into the external DRAM and debugs it. User can perform actions like setting breakpoints, single-stepping etc. . Debugging the applicaton using MPLABx has the following limitations: . Running application using debugger is not supported | Call stack is not supported | Step in, step out using debugger does not work | Note: Make sure that you reset the board between each debug sessions so that the debugger can attach to the target correctly . Running MPU applications . To run the applications, copy both the application binary named “harmony.bin” and the bootstrap binary named “boot.bin” onto an SD card. Insert the SD card into the SD slot of the evaluation kit and press the reset button. . The ROM bootloader will copy the bootstrap binary “boot.bin” into the internal SRAM and executes it. The bootstrap will configure the external DRAM and the required peripherals, then copy the applicaton binary “harmony.bin” into the DRAM and executes it. .",
    "url": "http://localhost:4000/azure-rtos-threadx/docs/apps/basic_threadx/docs/readme_at91bootstrap_sam_9x60_ek.html",
    "relUrl": "/docs/apps/basic_threadx/docs/readme_at91bootstrap_sam_9x60_ek.html"
  }
  ,"14": {
    "title": "",
    "content": ". Bootstrapping MPU applications using At91bootstrap loader . MPU applications are linked to execute from external DRAM memory that is available on the evaluation kit. This require all peripherals and clock leading to the DRAM memory to be configured prior to the application being programmed. This is done using a bootstrap loader. . Bootstrap loader project used for this purpose is a variant of the AT91Bootstrap project available for Microchip MPUs. It can be downloaded from here. This project is adapted to be used from within MPLABx IDE on both Windows and Linux. . To facilitate the debugging and running of the MPU application, each application in this repository is bundled with its own copy of the AT91Bootstrap project. Each copy of the bootstrap project can be found under same folder as the application project and is named and is prefixed with “at91bootstrap_”. For eg: if the application folder name is sam_a5d2_xult.X, then bootstrap project folder will be named at91bootstrap_sam_a5d2_xult.X and will be present at the same folder level. . Bootstrap project is configured to load and execute a raw binary file named “harmony.bin” from the SD card. SD card slot to be used shall vary with the evaluation kit. . Each application project is configured with a post build step which will generate the necessary binary file named “harmony.bin” at the end of each build. . If you are only interested in running or debugging the MPU applications in this repository , you can skip the following sections and and jump straight to Debugging MPU application using MPLABx. Each copy of the bootstrap project in this repository is preconfigured to the correct evaluation kit.Also, the bootstrap binary files required to program and run the applications are checked into the repository. . Building AT91Bootstrap project . Bootstrap project can be configured using MPLABx using its KCONFIG menu. To do this, open the project in MPLABx, right click on the project and select “properties”. In categories, select “Kconfig” as shown below: . . | Click on “LOAD” button and navigate to the boards folder inside the project. Choose the a default configuration file (defconfig) config file to select a target evaluation board and boot method For eg: If you want to boot harmony.bin file from sd card for SAMA5D27 evaluation kit, navigate to board/sama5d2_xplained folder and select “sama5d2_xplainedsd_harmony_defconfig” file | . | Click on “Apply” and “OK” buttons to configure the project . | Build the project to generate the bootstrap binaries . | Note: At91bootstrap project requires arm-gcc to build it. XC32 toolchain is not supported yet | . Configure MPLABx application to use AT91Bootstrap loader . MPLABx debugger relies on AT91Bootstrap to configure the board before programming the application binaries. To configure an application to use AT91Bootstrap, follow the steps detailed below: . Configure a debug tool . Right click on the application project and select properties. This will open the properties window. In the configuration option –&gt; connected hardware tools, select the debugger. . . Note: if no debugger is connected, click on the “show all” check box and select the supported debugger. Only Jlink options are supported . | Select the target toolchain and click on apply to save the changes . | This will result in an additional menu option to be available in the configuration tree view called “bootstrap” as shown below: . . | . Configure bootstrap . Click on “Use bootstrap” check box to enable bootstrap support . | Click on the “LOAD” button to load the bootstrap file. This will open a file picker, which allows you to choose the bootstrap binary file. . | Navigate to the “binaries” folder under the AT91Bootstrap project folder. This contains the build output of the bootstrap project. You can either choose the “AT91Bootstrap.elf” file or “boot.bin” file . If ELF file is choosen, the “Bootstrap entry address” and the “Bootstrap load address” text box can be left empty as this information can be read from the ELF file | If BIN file is chosen, the bootstrap entry address and the load address should be filled in their corresponding text boxes | An example configuration can be seen below. Here a relative path is used with respect to the project directory, to make the configuration portable . . | . | . Debugging MPU applications using MPLABx . Once the applicaton is configured to use bootstrap loader, debugging the application is as simple right clicking the application and selecting “Debug” option. This will cause debugger to perform a two stage loading: . Stage 1: Loads the bootstrap loader into the internal SRAM and executes it. This will configure the board specific peripherals and memory . Stage 2: Loads the application into the external DRAM and debugs it. User can perform actions like setting breakpoints, single-stepping etc. . Debugging the applicaton using MPLABx has the following limitations: . Running application using debugger is not supported | Call stack is not supported | Step in, step out using debugger does not work | Note: Make sure that you reset the board between each debug sessions so that the debugger can attach to the target correctly . Running MPU applications . To run the applications, copy both the application binary named “harmony.bin” and the bootstrap binary named “boot.bin” onto an SD card. Insert the SD card into the SD slot of the evaluation kit and press the reset button. . The ROM bootloader will copy the bootstrap binary “boot.bin” into the internal SRAM and executes it. The bootstrap will configure the external DRAM and the required peripherals, then copy the applicaton binary “harmony.bin” into the DRAM and executes it. .",
    "url": "http://localhost:4000/azure-rtos-threadx/docs/apps/basic_threadx/docs/readme_at91bootstrap_sam_a5d2_xult.html",
    "relUrl": "/docs/apps/basic_threadx/docs/readme_at91bootstrap_sam_a5d2_xult.html"
  }
  ,"15": {
    "title": "",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. . NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. . License and Sublicense Grant. . (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) &quot;Licensee Products&quot; means Licensee products that use or incorporate Microchip Products. (ii) &quot;Microchip Product&quot; means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) &quot;Object Code&quot; means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) &quot;Source Code&quot; means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) &quot;Third Party&quot; means Licensee&#39;s agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) &quot;Third Party Products&quot; means Third Party products that use or incorporate Microchip Products. . (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. . Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. . (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. . (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party&#39;s authorized use of the Software in conformance with this Section 2(d). . (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. . (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. . | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. . | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. . | Licensee’s Obligations. . (a) Licensee will ensure Third Party compliance with the terms of this Agreement. . (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. . (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. . (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. . | Confidentiality. . (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. . (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. . | Ownership of Proprietary Rights. . (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. . (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. . | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. . | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. . | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. . | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. . | General. . (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. . (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. . (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. . (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. . (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. . (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. . (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. . (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. . (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. . | If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. . Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. . License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. . Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. . THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. .",
    "url": "http://localhost:4000/azure-rtos-threadx/docs/mplab_harmony_license.html",
    "relUrl": "/docs/mplab_harmony_license.html"
  }
  ,"16": {
    "title": "Harmony 3 Azure RTOS ThreadX configurations and application examples",
    "content": ". Harmony 3 Azure RTOS ThreadX configurations and application examples . MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. . Microchip 32-bit MCUs | Microchip 32-bit MPUs | Microchip MPLAB X IDE | Microchip MPLAB® Harmony | Microchip MPLAB® Harmony Pages | . This repository contains the MPLAB® Harmony 3 Azure RTOS ThreadX configurations and application examples . Release Notes | MPLAB® Harmony License | . To clone or download these applications from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions . Contents Summary . Folder Description . apps | Azure RTOS ThreadX example applications | . config | Azure RTOS ThreadX module configuration scripts | . docs | Applications help documentation | . templates | Application and system file templates | . Code Examples . The following applications are provided to demonstrate the Azure RTOS ThreadX. . Name Description . Basic ThreadX | This example application blinks an LED to show the Azure RTOS ThreadX threads that are running and to indicate status | .   |   | . . . . . .",
    "url": "http://localhost:4000/azure-rtos-threadx/",
    "relUrl": "/"
  }
  
}